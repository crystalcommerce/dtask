-module(dtask_node_list).

% API
-export([new/1, is_empty/1, focus/1, step/1, size/1, add/2,
         seek/2, drop/1]).

-type node_list() :: {list(), list()}.

%%%==========================================================================
%%% API
%%%==========================================================================

%%---------------------------------------------------------------------------
%% @doc
%% @end
%%---------------------------------------------------------------------------
-spec new(list()) -> node_list().
new(List) ->
    {List, List}.

%%---------------------------------------------------------------------------
%% @doc
%% @end
%%---------------------------------------------------------------------------
-spec is_empty(node_list()) -> boolean().
is_empty({_Cursor, List}) ->
    List == [].

%%---------------------------------------------------------------------------
%% @doc
%% @end
%%---------------------------------------------------------------------------
-spec focus(node_list()) -> any() | undefined.
focus({_Cursor, []}) ->
    undefined;
focus({Cursor, _List}) ->
    lists:nth(1, Cursor).

%%---------------------------------------------------------------------------
%% @doc
%% @end
%%---------------------------------------------------------------------------
-spec step(node_list()) -> node_list().
step({[_Element | []], List}) ->
    {List, List};
step({[_Element | Tail], List}) ->
    {Tail, List}.

%%---------------------------------------------------------------------------
%% @doc
%% @end
%%---------------------------------------------------------------------------
-spec size(node_list()) -> integer().
size({_Cursor, List}) ->
    erlang:length(List).

%%---------------------------------------------------------------------------
%% @doc
%% @end
%%---------------------------------------------------------------------------
-spec add(any(), node_list()) -> node_list().
add(Node, {_Cursor, List}) ->
    {_Cursor, [Node | List]}.

%%---------------------------------------------------------------------------
%% @doc
%% @end
%%---------------------------------------------------------------------------
-spec seek(any(), node_list()) -> {ok, node_list()} | {error, term()}.
seek(Node, {_Cursor, List}) ->
    case lists:dropwhile(fun(N) -> N /= Node end, List) of
        [] ->
            {error, not_found};
        L ->
            {ok, {L, List}}
    end.

%%---------------------------------------------------------------------------
%% @doc
%% @end
%%---------------------------------------------------------------------------
-spec drop(node_list()) -> node_list().
drop({[Head | Tail], List}) ->
    NewList = lists:delete(Head, List),
    case Tail of
        [] ->
            {NewList, NewList};
        _ ->
            {Tail, NewList}
    end.
